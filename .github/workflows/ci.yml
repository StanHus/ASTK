name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.9", "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ".[dev]"

      - name: Run tests with coverage
        run: |
          pytest --cov=astk tests/ --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

      - name: Type check with mypy
        run: |
          mypy --strict astk/

      - name: Lint with ruff
        run: |
          pip install ruff
          ruff check astk/ tests/
          ruff format --check astk/ tests/

  benchmark:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    services:
      otel-collector:
        image: otel/opentelemetry-collector:0.96.0
        ports:
          - 4317:4317
        volumes:
          - ./otel-collector-config.yaml:/etc/otel-collector/config.yaml

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ".[dev]"

      - name: Run benchmarks
        run: |
          # Create sample agent for testing
          echo 'def main(): return "Hello from test agent"' > test_agent.py

          # Run benchmarks
          python scripts/run_benchmarks.py \
            --agent-entrypoint test_agent.py \
            --otlp-endpoint localhost:4317

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark_results/

      - name: Check benchmark thresholds
        run: |
          # Install dependencies for threshold checker and visualizations
          pip install pyyaml click numpy scipy matplotlib tabulate plotly

          # Find latest results file
          latest_results=$(ls -t benchmark_results/benchmark_results_*.json | head -n1)

          # Run threshold checks with enhanced features
          python scripts/check_thresholds.py \
            --results-file "$latest_results" \
            --thresholds-file config/benchmark_thresholds.yaml \
            --history-dir benchmark_results \
            --output-dir benchmark_reports \
            --fail-on-warning \
            --markdown-report

      - name: Upload benchmark reports
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-reports
          path: |
            benchmark_reports/
            benchmark_results/benchmark_thresholds.yaml

      - name: Deploy benchmark dashboard
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./benchmark_reports
          destination_dir: reports/${{ github.sha }}
          enable_jekyll: true

      - name: Comment PR with benchmark results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('benchmark_reports/benchmark_report.md', 'utf8');

            // Add link to interactive dashboard
            const dashboardUrl = `https://${context.repo.owner}.github.io/${context.repo.repo}/reports/${context.sha}`;
            const reportWithDashboard = report.replace(
              '(benchmark_reports/benchmark_report.html)',
              `(${dashboardUrl}/benchmark_report.html)`
            );

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: reportWithDashboard
            });
